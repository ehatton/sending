import os
import re
import subprocess
from typing import List


class SyntaxChecker:
    """Base class for syntax checkers.

    Attributes:
        file_to_check: name of the file to be checked.
        error_report: text of the error report generated by the called
            checking script or executable.
    """

    def __init__(self, file_to_check: str) -> None:
        self.file_to_check: str = file_to_check
        self.error_report: str = ""
        self._cmd: List[str] = []  # Arguments passed to subprocess.run()
        self._error_file: str = ""  # Name of the error file generated by the checker

    def check(self) -> None:
        """Runs the checking procedure on the file.

        Once the process has completed successfully the attribute error_report
        is updated. 
        """
        self._start_process()
        self._read_error_file()

    @property
    def ok(self) -> NotImplementedError:
        raise NotImplementedError

    def _start_process(self):
        """Launches the checking command in a subprocess.
        """
        subprocess.run(self._cmd, capture_output=True, text=True, check=True)

    def _read_error_file(self) -> None:
        """Reads the output of the checking command (from the file specified in
         self._error_file) and updates the error_report attribute.

         This should always be run after self._start_process has been called.
        """
        with open(self._error_file, "r") as infile:
            self.error_report = infile.read()


class LogFileChecker(SyntaxChecker):
    """Runs the logfile checker runplug.exe on logfiles.
    """

    def __init__(self, file_to_check: str):
        super().__init__(file_to_check)
        self._cmd: List[str] = ["runplug", self.file_to_check, "-check"]
        self._error_file: str = "synerr.tmp"

    @property
    def ok(self) -> bool:
        """Signals whether errors have been detected in the files.

        Returns:
            bool: False if errors are found in the entries, otherwise True.
                Defaults to False if the check method has not been run yet.
        """
        if self.error_report:
            error = re.search(r"chkfile.tmp.+ERROR", self.error_report)
            if not error:
                return True
        return False


class FlatFileChecker(SyntaxChecker):
    """Runs the Perl syntax checker script spsyntax.pl on flatfiles.
    """

    def __init__(self, file_to_check: str) -> None:
        super().__init__(file_to_check)
        spsyntax_path: str = os.path.join(os.environ["BINPROT"], "spsyntax.pl")
        self._cmd: List[str] = ["perl", spsyntax_path, "-c", "-a", self.file_to_check]
        self._error_file: str = f"{self.file_to_check}.log"

    @property
    def ok(self) -> bool:
        """Signals whether errors have been detected in the files.

        Returns:
            bool: False if errors are found in the entries, otherwise True.
                Defaults to False if the check method has not been run yet.
        """
        if self.error_report:
            error_summary = re.search(r"\d+ errors found.", self.error_report).group()
            if error_summary.startswith("0"):
                return True
        return False
